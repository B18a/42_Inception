
// See all build images:
docker images


// remove a build image
docker rmi <image-name-or-id>

// build a image with
// -t "tag" to git the image a name
// . current folder/directory
docker build -t testimage:latest .

// start an exisiting container

docker start <container_id_or_name>


// see all running containers
docker ps

// see all containers
docker ps -a

// remove a container NOT a build
docker rm hopeful_hugle


// run container
// Run in detached mode: Use -d to run the container in the background.
// -it runs the container interactively, allowing you to enter commands in the containerâ€™s terminal.
// Map ports: Use -p to expose ports from the container to the host. 8080 is host, 80 is container port
docker run -p 8080:80 test:latest

docker run -it test:latest

docker run --name my-container-name -it test:latest



// acces the bash inside the container
docker exec -it my-container /bin/bash


docker run -it --name testrun -v /Users/ajehle/Desktop/local_inception:/root testimage
docker run -it --name testrun -v /Users/ajehle/Desktop/local_inception:/root ftpimg


docker inspect container_name | grep "Ports"


// mariadb
// enter db
mysql -h 127.0.0.1 -P 3306 -u "myuser" -p

SHOW DATABASES;

USE mydb;

SHOW TABLES;

SELECT * FROM wp_comments;



http://localhost:8080/adminer.php

http://localhost:85/


# nginx
https://serverfault.com/questions/1075019/nginx-on-debian-buster-the-right-way-to-handle-config-files


*.conf-Files inside /etc/ngninx/conf.d This is the default directory, which nginx creates after installation. It is used to store virtual host configurations in the *.conf format. However, this is not the best approach.

*.conf-Files inside /etc/nginx/sites-available A more elegant approach is to have the .conf file of your virtual host situated in sites-available.

*.conf-Files inside /etc/nginx/sites-enabled This is where you would symlink the virtual hosts from sites-available, to make nginx read and work with them.

Check $uri: NGINX checks if there is a file /about. If it exists, it serves that file.
Check $uri/: If /about does not exist as a file, NGINX checks for a directory /about/. If found, it serves that directory.
Return 404: If neither /about nor /about/ exists, it responds with a 404 Not Found error.

 try_files $uri $uri/ =404;


#  kuma

http://website

https://nginx

http://adminer/adminer.php


